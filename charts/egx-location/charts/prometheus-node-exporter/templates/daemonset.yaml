apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ template "prometheus-node-exporter.fullname" . }}
  labels: {{ include "prometheus-node-exporter.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ template "prometheus-node-exporter.name" . }}
      release: {{ .Release.Name }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels: {{ include "prometheus-node-exporter.labels" . | indent 8 }}
      # To enable systemd collector (NGCC-10316)
      annotations:
        container.apparmor.security.beta.kubernetes.io/node-exporter: unconfined
    spec:
{{- if and .Values.rbac.create .Values.serviceAccount.create }}
      serviceAccountName: {{ template "prometheus-node-exporter.serviceAccountName" . }}
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      containers:

        - name: node-exporter
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --path.rootfs=/host
            - --web.listen-address=0.0.0.0:{{ .Values.service.port }}
{{- if .Values.extraArgs }}
{{ toYaml .Values.extraArgs | indent 12 }}
{{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: rootfs
              mountPath: /host
              readOnly:  true
            {{- if .Values.extraHostVolumeMounts }}
            {{- range $_, $mount := .Values.extraHostVolumeMounts }}
            - name: {{ $mount.name }}
              mountPath: {{ $mount.mountPath }}
              readOnly: {{ $mount.readOnly }}
            {{- if $mount.mountPropagation }}
              mountPropagation: {{ $mount.mountPropagation }}
            {{- end }}
            {{- end }}
            {{- end }}

        - name: push-proxy-client
          image: "{{ .Values.pushProxyClient.image.repository }}:{{ .Values.pushProxyClient.image.tag }}"
          imagePullPolicy: "{{ .Values.pushProxyClient.image.pullPolicy }}"
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          args:
          - --proxy-url={{ required "pushProxyClient.proxyUrl" .Values.pushProxyClient.proxyUrl }}
          - --fqdn=$(POD_NAME).$(SERVICE_NAME).$(NAMESPACE).svc.$(LOCATION_NAME)
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SERVICE_NAME
            value: {{ template "prometheus-node-exporter-gpu.fullname" . }}
          - name: LOCATION_NAME
            value: {{ required "locationName" .Values.locationName }}
          - name: PORT
            value: "{{ .Values.service.targetPort }}"

      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: rootfs
          hostPath:
            path: /
        {{- if .Values.extraHostVolumeMounts }}
        {{- range $_, $mount := .Values.extraHostVolumeMounts }}
        - name: {{ $mount.name }}
          hostPath:
            path: {{ $mount.hostPath }}
        {{- end }}
        {{- end }}
        {{- if .Values.configmaps }}
        {{- range $_, $mount := .Values.configmaps }}
        - name: {{ $mount.name }}
          configMap:
            name: {{ $mount.name }}
        {{- end }}
        {{- end }}
